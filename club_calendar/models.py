from django.conf import settings
from django.core.validators import RegexValidator
from django.db import models

hex_color_validator = RegexValidator(
    regex=r"^#(?:[0-9a-fA-F]{3}){1,2}$",
    message="Enter a valid HEX colour like #1e90ff or #09f",
)


class Topic(models.Model):
    name = models.CharField(max_length=80, unique=True)
    color = models.CharField(
        max_length=7,
        validators=[hex_color_validator],
        default="#3c8dbc",
        help_text="HEX colour (e.g. #3c8dbc).",
    )
    description = models.TextField(blank=True)
    active = models.BooleanField(default=True)

    class Meta:
        ordering = ["name"]

    def __str__(self):
        return self.name


class Event(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    start = models.DateTimeField()
    end = models.DateTimeField(null=True, blank=True)
    all_day = models.BooleanField(default=False)
    location = models.CharField(max_length=255, blank=True)

    topic = models.ForeignKey(
        Topic, null=True, blank=True, on_delete=models.SET_NULL, related_name="events"
    )

    # Visibility
    visible_to_groups = models.ManyToManyField(
        "auth.Group", blank=True, related_name="calendar_events"
    )
    visible_to_teams = models.ManyToManyField(
        "members.Team", blank=True, related_name="calendar_events"
    )

    # Recurrence (series)
    is_recurring = models.BooleanField(default=False, help_text="Tick to enable recurrence.")
    rrule = models.TextField(
        blank=True,
        help_text='iCal RRULE generated by the form (e.g. "FREQ=WEEKLY;BYDAY=MO,WE").',
    )
    recurrence_end = models.DateTimeField(
        null=True, blank=True, help_text="Optional end for recurrence (UNTIL)."
    )

    # Audit
    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name="created_calendar_events",
    )
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["start"]

    def __str__(self):
        return self.title

    def as_fullcalendar_dict(self, occurrence_start=None, occurrence_end=None):
        """
        Build a FullCalendar event dict.
        For recurring instances, encode the id as "<series_id>::<occurrence_iso>".
        """
        color = self.topic.color if self.topic else None

        if occurrence_start is not None:
            occ_id = f"{self.pk}::{occurrence_start.isoformat()}"
            start_iso = occurrence_start.isoformat()
            end_iso = occurrence_end.isoformat() if occurrence_end else None
        else:
            occ_id = str(self.pk)
            start_iso = self.start.isoformat()
            end_iso = self.end.isoformat() if self.end else None

        payload = {
            "id": occ_id,
            "title": self.title,
            "start": start_iso,
            "end": end_iso,
            "allDay": self.all_day,
            "extendedProps": {
                "location": self.location,
                "description": self.description[:500],
                "topic": self.topic.name if self.topic else None,
                "seriesId": self.pk,
                "isRecurring": self.is_recurring,
                "occurrenceStart": start_iso if occurrence_start else None,
            },
        }
        if color:
            payload["color"] = color
        return payload


class EventCancellation(models.Model):
    """
    Single cancelled occurrence within a recurring series.
    """

    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name="cancellations")
    occurrence_start = models.DateTimeField(db_index=True)

    class Meta:
        unique_together = ("event", "occurrence_start")
        indexes = [models.Index(fields=["event", "occurrence_start"])]

    def __str__(self):
        return f"Cancel {self.event.title} @ {self.occurrence_start}"


class EventOverride(models.Model):
    """
    Per-occurrence override (time/title/location/description/topic) for a recurring series.
    """

    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name="overrides")
    occurrence_start = models.DateTimeField(db_index=True, help_text="Original occurrence start")

    new_start = models.DateTimeField(null=True, blank=True)
    new_end = models.DateTimeField(null=True, blank=True)
    new_title = models.CharField(max_length=200, blank=True)
    new_location = models.CharField(max_length=255, blank=True)
    new_description = models.TextField(blank=True)
    new_topic = models.ForeignKey(Topic, null=True, blank=True, on_delete=models.SET_NULL)

    class Meta:
        unique_together = ("event", "occurrence_start")
        indexes = [models.Index(fields=["event", "occurrence_start"])]

    def __str__(self):
        return f"Override {self.event.title} @ {self.occurrence_start}"
